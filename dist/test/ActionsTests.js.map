{"version":3,"sources":["test/ActionsTests.ts"],"names":[],"mappings":"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","file":"ActionsTests.js","sourcesContent":["///<reference path=\"../node_modules/@types/mocha/index.d.ts\"/>\r\nimport * as SN from 'sn-client-js';\r\nimport { Actions } from '../src/Actions'\r\nimport * as Chai from 'chai';\r\nconst expect = Chai.expect;\r\n\r\ndescribe('Actions', () => {\r\n    const path = '/workspaces/project';\r\n    describe('FetchContent', () => {\r\n        it('should create an action to a fetch content request', () => {\r\n            const expectedAction = {\r\n                type: 'FETCH_CONTENT_REQUEST',\r\n                path: '/workspaces/project',\r\n                filter: \"?$select=Id,Type&metadata=no\"\r\n            }\r\n            expect(Actions.RequestContent(path, {})).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to receive content', () => {\r\n            const expectedAction = {\r\n                type: 'FETCH_CONTENT_SUCCESS',\r\n                response: { entities: {}, result: [] },\r\n                filter: \"?$select=Id,Type&metadata=no\"\r\n            }\r\n            expect(Actions.ReceiveContent({ d: { results: [] } }, '?$select=Id,Type&metadata=no')).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to content fetch request failure', () => {\r\n            const expectedAction = {\r\n                type: 'FETCH_CONTENT_FAILURE',\r\n                message: 'error',\r\n                filter: \"?$select=Id,Type&metadata=no\"\r\n            }\r\n            expect(Actions.ReceiveContentFailure('?$select=Id,Type&metadata=no', { message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('CreateContent', () => {\r\n        const content = SN.Content.Create('Article', { DisplayName: 'My content', Id: 123 })\r\n        it('should create an action to a create content request', () => {\r\n            const expectedAction = {\r\n                type: 'CREATE_CONTENT_REQUEST',\r\n                path: '/workspaces/project',\r\n                content: content\r\n            }\r\n            expect(Actions.CreateContent(path, content)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to create content success', () => {\r\n            const expectedAction = {\r\n                type: 'CREATE_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: 'My content',\r\n                                Id: 123\r\n                            }\r\n                        }\r\n                    },\r\n                    result: 123\r\n                }\r\n            }\r\n            expect(Actions.CreateContentSuccess({ response: { d: { DisplayName: 'My content', Id: 123 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to content creation failure', () => {\r\n            const expectedAction = {\r\n                type: 'CREATE_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.CreateContentFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('UpdateContent', () => {\r\n        it('should create an action to an update content request', () => {\r\n            const expectedAction = {\r\n                type: 'UPDATE_CONTENT_REQUEST',\r\n                id: 123,\r\n                fields: { Index: 2 }\r\n            }\r\n            expect(Actions.UpdateContent(123, { Index: 2 })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to update content success', () => {\r\n            const expectedAction = {\r\n                type: 'UPDATE_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.UpdateContentSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to content update request failure', () => {\r\n            const expectedAction = {\r\n                type: 'UPDATE_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.UpdateContentFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('DeleteContent', () => {\r\n        it('should create an action to a delete content request', () => {\r\n            const expectedAction = {\r\n                type: 'DELETE_CONTENT_REQUEST',\r\n                id: 123,\r\n                permanently: false\r\n            }\r\n            expect(Actions.Delete(123, false)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to delete content success', () => {\r\n            const expectedAction = {\r\n                type: 'DELETE_CONTENT_SUCCESS',\r\n                id: 123,\r\n                index: 0\r\n            }\r\n            expect(Actions.DeleteSuccess(0, 123)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to delete content failure', () => {\r\n            const expectedAction = {\r\n                type: 'DELETE_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.DeleteFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('DeleteBatchContent', () => {\r\n        it('should create an action to a delete content request', () => {\r\n            const expectedAction = {\r\n                type: 'DELETE_BATCH_REQUEST',\r\n                path: path,\r\n                ids: ['1', '2', '3'],\r\n                permanently: false\r\n            }\r\n            expect(Actions.DeleteBatch(path, ['1', '2', '3'], false)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to delete content success', () => {\r\n            const expectedAction = {\r\n                type: 'DELETE_BATCH_SUCCESS',\r\n                indexes: [0, 1, 2]\r\n            }\r\n            expect(Actions.DeleteBatchSuccess([0, 1, 2])).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to delete content failure', () => {\r\n            const expectedAction = {\r\n                type: 'DELETE_BATCH_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.DeleteBatchFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('CheckoutContent', () => {\r\n        it('should create an action to a checkout content request', () => {\r\n            const expectedAction = {\r\n                type: 'CHECKOUT_CONTENT_REQUEST',\r\n                id: 123\r\n            }\r\n            expect(Actions.CheckOut(123)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to checkout content success', () => {\r\n            const expectedAction = {\r\n                type: 'CHECKOUT_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.CheckOutSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to checkout content failure', () => {\r\n            const expectedAction = {\r\n                type: 'CHECKOUT_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.CheckOutFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('CheckinContent', () => {\r\n        it('should create an action to a checkin content request', () => {\r\n            const expectedAction = {\r\n                type: 'CHECKIN_CONTENT_REQUEST',\r\n                id: 123,\r\n                checkInComment: 'comment'\r\n            }\r\n            expect(Actions.CheckIn(123, 'comment')).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to checkin content success', () => {\r\n            const expectedAction = {\r\n                type: 'CHECKIN_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.CheckInSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to checkin content failure', () => {\r\n            const expectedAction = {\r\n                type: 'CHECKIN_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.CheckInFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('PublishContent', () => {\r\n        it('should create an action to a publish content request', () => {\r\n            const expectedAction = {\r\n                type: 'PUBLISH_CONTENT_REQUEST',\r\n                id: 123\r\n            }\r\n            expect(Actions.Publish(123)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to publish content success', () => {\r\n            const expectedAction = {\r\n                type: 'PUBLISH_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.PublishSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to publish content failure', () => {\r\n            const expectedAction = {\r\n                type: 'PUBLISH_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.PublishFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('ApproveContent', () => {\r\n        it('should create an action to an approve content request', () => {\r\n            const expectedAction = {\r\n                type: 'APPROVE_CONTENT_REQUEST',\r\n                id: 123\r\n            }\r\n            expect(Actions.Approve(123)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to approve content success', () => {\r\n            const expectedAction = {\r\n                type: 'APPROVE_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.ApproveSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to approve content failure', () => {\r\n            const expectedAction = {\r\n                type: 'APPROVE_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.ApproveFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('RejectContent', () => {\r\n        it('should create an action to an reject content request', () => {\r\n            const expectedAction = {\r\n                type: 'REJECT_CONTENT_REQUEST',\r\n                id: 123,\r\n                rejectReason: 'reason'\r\n            }\r\n            expect(Actions.Reject(123, 'reason')).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to reject content success', () => {\r\n            const expectedAction = {\r\n                type: 'REJECT_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.RejectSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to reject content failure', () => {\r\n            const expectedAction = {\r\n                type: 'REJECT_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.RejectFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('UndoCheckoutContent', () => {\r\n        it('should create an action to an undo-checkout content request', () => {\r\n            const expectedAction = {\r\n                type: 'UNDOCHECKOUT_CONTENT_REQUEST',\r\n                id: 123\r\n            }\r\n            expect(Actions.UndoCheckout(123)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to undo-checkout content success', () => {\r\n            const expectedAction = {\r\n                type: 'UNDOCHECKOUT_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.UndoCheckoutSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to undo-checkout content failure', () => {\r\n            const expectedAction = {\r\n                type: 'UNDOCHECKOUT_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.UndoCheckoutFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('ForceUndoCheckoutContent', () => {\r\n        it('should create an action to a force undo-checkout content request', () => {\r\n            const expectedAction = {\r\n                type: 'FORCEUNDOCHECKOUT_CONTENT_REQUEST',\r\n                id: 123\r\n            }\r\n            expect(Actions.ForceUndoCheckout(123)).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to force undo-checkout content success', () => {\r\n            const expectedAction = {\r\n                type: 'FORCEUNDOCHECKOUT_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.ForceUndoCheckoutSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to force undo-checkout content failure', () => {\r\n            const expectedAction = {\r\n                type: 'FORCEUNDOCHECKOUT_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.ForceUndoCheckoutFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('RestoreVersion', () => {\r\n        it('should create an action to a version restore request', () => {\r\n            const expectedAction = {\r\n                type: 'RESTOREVERSION_CONTENT_REQUEST',\r\n                id: 123,\r\n                version: 'A.1.0'\r\n            }\r\n            expect(Actions.RestoreVersion(123, 'A.1.0')).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a version restore success', () => {\r\n            const expectedAction = {\r\n                type: 'RESTOREVERSION_CONTENT_SUCCESS',\r\n                response: {\r\n                    entities: {\r\n                        collection: {\r\n                            123: {\r\n                                DisplayName: \"My content\",\r\n                                Id: 123,\r\n                                Index: 2\r\n                            }\r\n                        }\r\n                    }, result: 123\r\n                }\r\n            }\r\n            expect(Actions.RestoreVersionSuccess({ response: { d: { DisplayName: 'My content', Id: 123, Index: 2 } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a version restore failure', () => {\r\n            const expectedAction = {\r\n                type: 'RESTOREVERSION_CONTENT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.RestoreVersionFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('UserLogin', () => {\r\n        it('should create an action to a user login request', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGIN_REQUEST',\r\n                userName: 'alba',\r\n                password: 'alba'\r\n            }\r\n            expect(Actions.UserLogin('alba', 'alba')).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a user login success', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGIN_SUCCESS',\r\n                response: {\r\n                    Name: 'alba',\r\n                    DisplayName: 'Alba Monday'\r\n                }\r\n            }\r\n            expect(Actions.UserLoginSuccess({ response: { d: { Name: 'alba', DisplayName: 'Alba Monday' } } })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a user login failure', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGIN_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.UserLoginFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a user login failure with the proper message when 403', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGIN_FAILURE',\r\n                message: 'The username or the password is not valid!'\r\n            }\r\n            expect(Actions.UserLoginFailure({ message: 'The username or the password is not valid!', status: 403 })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n    describe('UserLogout', () => {\r\n        it('should create an action to a user logout request', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGOUT_REQUEST'\r\n            }\r\n            expect(Actions.UserLogout()).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a user logout success', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGOUT_SUCCESS'\r\n            }\r\n            expect(Actions.UserLogoutSuccess({})).to.deep.equal(expectedAction)\r\n        });\r\n        it('should create an action to a user logout failure', () => {\r\n            const expectedAction = {\r\n                type: 'USER_LOGOUT_FAILURE',\r\n                message: 'error'\r\n            }\r\n            expect(Actions.UserLogoutFailure({ message: 'error' })).to.deep.equal(expectedAction)\r\n        });\r\n    });\r\n});"]}