{"version":3,"sources":["src/Schema.ts"],"names":[],"mappings":";;AAAA,yCAAmC;AAwCnC,IAAc,OAAO,CAapB;AAbD,WAAc,OAAO;IAMJ,eAAO,GAAG,IAAI,kBAAM,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IAMrE,sBAAc,GAAG,IAAI,kBAAM,CAAC,KAAK,CAAC,QAAA,OAAO,CAAC,CAAC;AAC5D,CAAC,EAba,OAAO,GAAP,eAAO,KAAP,eAAO,QAapB","file":"Schema.js","sourcesContent":["import { schema } from 'normalizr';\r\n\r\n/** \r\n * This module is for defining Content and Collection schemas to normalize nested JSON response data in redux state store.\r\n * \r\n * Normalizr takes JSON and a schema and replaces nested entities with their IDs, gathering all entities in dictionaries.\r\n ** Entities can be nested inside other entities, objects and arrays;\r\n ** Combine entity schemas to express any kind of API response;\r\n ** Entities with same IDs are automatically merged (with a warning if they differ);\r\n ** Allows using a custom ID attribute (e.g. slug).\r\n *\r\n * Read more about normalizr [here](https://github.com/paularmstrong/normalizr)\r\n * \r\n * Since everything is a Content in SenseNet we're working with Content and collection of Content in most of the cases. So the sn-redux Schemas module defines the two\r\n * neccessarry main schema, content and arrayofContent to work with. This two schemas help you to normalize your JSON responses so that you can create a pure and flexible \r\n * client-side datasource.\r\n * \r\n * Example of normalizing the JSON response of a SenseNet OData Action for fetching Content as arrayOfContent schema which will create a collection object.\r\n * ```ts\r\n * export const receiveContent = (response: any, filter: string) =>\r\n *  ({\r\n *      type: 'FETCH_CONTENT_SUCCESS',\r\n *      response: normalize(response.d.results, Schemas.arrayOfContent),\r\n *      filter\r\n *  })\r\n * ```\r\n * \r\n * ![Normalized collection](http://download.sensenet.com/aniko/sn7/jsapidocs/img/normalized-collection.png)\r\n * \r\n * Example of normalizing the JSON response of a SenseNet OData Action for creating Content as content schema.\r\n * ```ts\r\n * export const createContentSuccess = (response: any) =>\r\n *  ({\r\n *      type: 'CREATE_CONTENT_SUCCESS',\r\n *      response: normalize(response.response.d, Schemas.content)\r\n *  });\r\n * ```\r\n * \r\n * ![Normalized content](http://download.sensenet.com/aniko/sn7/jsapidocs/img/normalized-content.png)\r\n*/\r\nexport module Schemas{\r\n    /**\r\n     * Schema of a Content. \r\n     * \r\n     * It represents an item in the collection Object of the sn-redux store. The items are identified by the attribute 'Id'.\r\n     */\r\n    export const content = new schema.Entity('collection', {}, { idAttribute: 'Id' });\r\n    /**\r\n     * Schema of a Collection.\r\n     * \r\n     * It represents the top object of the sn-redux store. It's a parent element of the Content items so it is defined as array of items with the schema content.\r\n     */\r\n    export const arrayOfContent = new schema.Array(content);\r\n}"]}