{"version":3,"sources":["src/Store.ts"],"names":[],"mappings":";AAAA,wBAA6C,OAAO,CAAC,CAAA;AACrD,MAAY,YAAY,WAAM,cAC9B,CAAC,CAD2C;AAC5C,mCAAqC,kBAAkB,CAAC,CAAA;AACxD,wBAAsB,SAAS,CAAC,CAAA;AAChC,2BAAyB,YAAY,CAAC,CAAA;AA6BtC,IAAc,KAAK,CAkDlB;AAlDD,WAAc,KAAK,EAAC,CAAC;IAuBJ,oBAAc,GAAG,CAAC,WAAW,GAAQ,mBAAQ,CAAC,KAAK,EAAE,QAAQ,GAAQ,aAAK,CAAC,QAAQ,EAAE,WAAwB,EAAE,cAAuB;QAC/I,MAAM,cAAc,GAAG,uCAAoB,CAAC,QAAQ,CAAC,CAAC;QACtD,IAAI,eAAe,GAAG,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,WAAW,CAAC,CAAC,CAAC;YACrC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC;QACD,IAAI,CAAC,CAAC;YACF,eAAe,GAAG,CAAC,GAAG,WAAW,EAAE,cAAc,CAAC,CAAC;QACvD,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC;YACxC,MAAM,gBAAgB,GAAI,YAAoB,EAAE,CAAC;YACjD,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,cAAc,KAAK,WAAW,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,mBAAW,CACd,WAAW,EACX,cAAc,EACd,uBAAe,CAAC,GAAG,eAAe,CAAC,CACtC,CAAC;QACN,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,mBAAW,CACd,WAAW,EACX,uBAAe,CAAC,GAAG,eAAe,CAAC,CACtC,CAAC;QACN,CAAC;IACL,CAAC,CAAC;AACN,CAAC,EAlDa,KAAK,GAAL,aAAK,KAAL,aAAK,QAkDlB","file":"Store.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport * as createLogger from 'redux-logger'\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { Epics } from './Epics';\r\nimport { Reducers } from './Reducers';\r\n\r\n/**\r\n * Module for configuring a store.\r\n * \r\n * It is actually a redux based data store, that lets you keep your application data in on place, allows you to access (get and update) the application state or subscribe to its listeners.\r\n * \r\n * Two middlewares are built-in:\r\n * * [redux-observable](https://redux-observable.js.org/) is as RxJS 5-based middleware for Redux. It's needed to compose and cancel async actions to create side effects and more, \r\n * so that your app are able to get or post data to Sense/Net Content Repository through OData with ajax requests.\r\n * * [redux-logger](https://github.com/evgenyrodionov/redux-logger) creates a detailed log on the dev toolbar console on all state changes.\r\n * You can add other middlewares too through the configureStore functions second param as an array of middlewares. But the built-in middlewares will be the part of the applied middleware group\r\n * in every way.\r\n * \r\n * ```\r\n * import * as React from \"react\";\r\n * import * as ReactDOM from \"react-dom\";\r\n * import Authentication from 'redux-authentication'\r\n * import { myRootReducer } from '../myApp/Reducers'\r\n * import { myRootEpic } from '../myApp/Epics'\r\n * \r\n * const store = Store.configureStore(myRootReducer, myRootEpic, [Authentication]);\r\n * \r\n * ReactDOM.render(\r\n * <Root store={store} />,\r\n * document.getElementById(\"root\")\r\n * );\r\n * ```\r\n */\r\nexport module Store {\r\n    /**\r\n     * Method to create a Redux store that holds the application state.\r\n     * @param {any} [rootReducer=Reducers.snApp] Root reducer of your application.\r\n     * @param {any} [rootEpic=Epics.rootEpic] Root epic of your application.\r\n     * @param {Array<any>=} middlewares Array of middlewares.\r\n     * @param {Object=} persistedState Persisted state.\r\n     * @returns {Store} Returns a Redux store, an object that holds the application state.\r\n     * ```\r\n     * import * as React from \"react\";\r\n     * import * as ReactDOM from \"react-dom\";\r\n     * import Authentication from 'redux-authentication'\r\n     * import { myRootReducer } from '../myApp/Reducers'\r\n     * import { myRootEpic } from '../myApp/Epics'\r\n     * \r\n     * const store = Store.configureStore(myRootReducer, myRootEpic, [Authentication]);\r\n     * \r\n     * ReactDOM.render(\r\n     * <Root store={store} />,\r\n     * document.getElementById(\"root\")\r\n     * );\r\n     * ```\r\n     */\r\n    export const configureStore = (rootReducer: any = Reducers.snApp, rootEpic: any = Epics.rootEpic, middlewares?: Array<any>, persistedState?: Object) => {\r\n        const epicMiddleware = createEpicMiddleware(rootEpic);\r\n        let middlewareArray = [];\r\n        if (typeof middlewares === 'undefined') {\r\n            middlewareArray.push(epicMiddleware);\r\n        }\r\n        else {\r\n            middlewareArray = [...middlewares, epicMiddleware];\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const loggerMiddleware = (createLogger as any)();\r\n            middlewareArray.push(loggerMiddleware);\r\n        }\r\n        if (typeof persistedState !== 'undefined') {\r\n            return createStore(\r\n                rootReducer,\r\n                persistedState,\r\n                applyMiddleware(...middlewareArray)\r\n            );\r\n        }\r\n        else {\r\n            return createStore(\r\n                rootReducer,\r\n                applyMiddleware(...middlewareArray)\r\n            );\r\n        }\r\n    };\r\n}"]}